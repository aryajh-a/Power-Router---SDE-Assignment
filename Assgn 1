
// SOLUTION OF ASSIGNMENT - 01


public static int NewCurrent(Queue<Character> OldTask, int current, Queue<Character> NewTask) {

        // Return -1 if any one of the queues are empty, -1 denotes that none will get the next task
        if (OldTask.isEmpty() || NewTask.isEmpty())
            return -1;
            
        // return -1 if current index > size of the old queue
        if (current > OldTask.size())
            return -1;

        // Initialise count =0
        int count = 0, ans;

        for (int i = 1; i <= current; i++) {
        
            // If any of the queues get empty, return -1
            if (OldTask.isEmpty() || NewTask.isEmpty())
                return -1;
                
            // If the element of old task queue is inactive in new task queue, remove it and
            // increment count if i!=current index
            if (OldTask.peek() != NewTask.peek()) {
                OldTask.poll();
                if (i != current)
                    count++;
            }
            // otherwise, if both the queues has the element, remove the element from both queues
            else {
                OldTask.poll();
                NewTask.poll();
            }
        }

        // calculate the answer and return it
        ans = current - count;
        return ans;
    }
